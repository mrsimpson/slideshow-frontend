drop policy "All users can see presentations" on "public"."presentation";

drop policy "Enable all access for presenter" on "public"."presentation";

drop policy "Enable insert for authenticated users only" on "public"."presentation_events";

drop policy "Presenter can see all events for own presentation" on "public"."presentation_events";

revoke delete on table "public"."presentation" from "anon";

revoke insert on table "public"."presentation" from "anon";

revoke references on table "public"."presentation" from "anon";

revoke select on table "public"."presentation" from "anon";

revoke trigger on table "public"."presentation" from "anon";

revoke truncate on table "public"."presentation" from "anon";

revoke update on table "public"."presentation" from "anon";

revoke delete on table "public"."presentation" from "authenticated";

revoke insert on table "public"."presentation" from "authenticated";

revoke references on table "public"."presentation" from "authenticated";

revoke select on table "public"."presentation" from "authenticated";

revoke trigger on table "public"."presentation" from "authenticated";

revoke truncate on table "public"."presentation" from "authenticated";

revoke update on table "public"."presentation" from "authenticated";

revoke delete on table "public"."presentation" from "service_role";

revoke insert on table "public"."presentation" from "service_role";

revoke references on table "public"."presentation" from "service_role";

revoke select on table "public"."presentation" from "service_role";

revoke trigger on table "public"."presentation" from "service_role";

revoke truncate on table "public"."presentation" from "service_role";

revoke update on table "public"."presentation" from "service_role";

alter table "public"."presentation" drop constraint "presentation_presenter_fkey";

alter table "public"."presentation_events" drop constraint "presentation_events_presentation_fkey";

alter table "public"."presentation_events" drop constraint "presentation_events_presentation_fkey1";

alter table "public"."presentation" drop constraint "presentation_pkey";

drop index if exists "public"."presentation_pkey";

drop table "public"."presentation";

create table "public"."presentations" (
                                          "id" bigint generated by default as identity not null,
                                          "created_at" timestamp with time zone not null default now(),
                                          "presenter" uuid not null default auth.uid(),
                                          "title" text
);


alter table "public"."presentations" enable row level security;

alter table "public"."presentation_events" alter column "created_by" drop not null;

CREATE UNIQUE INDEX presentation_pkey ON public.presentations USING btree (id);

alter table "public"."presentations" add constraint "presentation_pkey" PRIMARY KEY using index "presentation_pkey";

alter table "public"."presentations" add constraint "presentation_presenter_fkey" FOREIGN KEY (presenter) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."presentations" validate constraint "presentation_presenter_fkey";

alter table "public"."presentation_events" add constraint "presentation_events_presentation_fkey" FOREIGN KEY (presentation) REFERENCES presentations(id) ON UPDATE CASCADE not valid;

alter table "public"."presentation_events" validate constraint "presentation_events_presentation_fkey";

alter table "public"."presentation_events" add constraint "presentation_events_presentation_fkey1" FOREIGN KEY (presentation) REFERENCES presentations(id) ON UPDATE CASCADE not valid;

alter table "public"."presentation_events" validate constraint "presentation_events_presentation_fkey1";

grant delete on table "public"."presentations" to "anon";

grant insert on table "public"."presentations" to "anon";

grant references on table "public"."presentations" to "anon";

grant select on table "public"."presentations" to "anon";

grant trigger on table "public"."presentations" to "anon";

grant truncate on table "public"."presentations" to "anon";

grant update on table "public"."presentations" to "anon";

grant delete on table "public"."presentations" to "authenticated";

grant insert on table "public"."presentations" to "authenticated";

grant references on table "public"."presentations" to "authenticated";

grant select on table "public"."presentations" to "authenticated";

grant trigger on table "public"."presentations" to "authenticated";

grant truncate on table "public"."presentations" to "authenticated";

grant update on table "public"."presentations" to "authenticated";

grant delete on table "public"."presentations" to "service_role";

grant insert on table "public"."presentations" to "service_role";

grant references on table "public"."presentations" to "service_role";

grant select on table "public"."presentations" to "service_role";

grant trigger on table "public"."presentations" to "service_role";

grant truncate on table "public"."presentations" to "service_role";

grant update on table "public"."presentations" to "service_role";

create policy "Enable insert for all users"
    on "public"."presentation_events"
    as permissive
    for insert
    to anon, authenticated
    with check (true);


create policy "All users can see presentations"
    on "public"."presentations"
    as permissive
    for select
    to authenticated
    using (true);


create policy "Enable all access for presenter"
    on "public"."presentations"
    as permissive
    for all
    to public
    using ((( SELECT auth.uid() AS uid) = presenter));


create policy "Presenter can see all events for own presentation"
    on "public"."presentation_events"
    as permissive
    for select
    to authenticated
    using ((( SELECT auth.uid() AS uid) IN ( SELECT presentations.presenter
                                             FROM presentations
                                             WHERE (presentations.id = presentation_events.presentation))));