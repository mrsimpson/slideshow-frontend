create table public.presentations
(
    id          bigint generated by default as identity
        constraint presentation_pkey
            primary key,
    created_at  timestamp with time zone      default now()                                     not null,
    presenter   uuid                          default auth.uid()                                not null
        constraint presentation_presenter_fkey
            references auth.users
        on update cascade on delete set null,
    title       text,
    lc_status   presentation_lifecycle_status default 'prepared'::presentation_lifecycle_status not null,
    description text,
    join_code   text
        unique
);

comment on column public.presentations.lc_status is 'Lifecycle status';

comment on column public.presentations.description is 'A short summary provided by the presenter';

comment on column public.presentations.join_code is 'A public, unique code for the audience to join a presentation';

alter table public.presentations
    owner to postgres;

create index join_code
    on public.presentations (join_code);

create index presenter
    on public.presentations (presenter);

create trigger after_presentation_created_join_code
    after insert
    on public.presentations
    for each row
execute procedure public.add_join_code();

create policy "Enable all access for presenter" on public.presentations
    as permissive
    for all
    using ((SELECT auth.uid() AS uid) = presenter);

-- the following policy would create an infinite recursion when reading presentations
-- create policy "allow joined users to read presentations" on public.presentations
--     as permissive
--     for select
--     using ((SELECT id) in (SELECT presentation from presentation_events where created_by = auth.uid() and type = 'user_joined'));

grant delete, insert, references, select, trigger, truncate, update on public.presentations to anon;

grant delete, insert, references, select, trigger, truncate, update on public.presentations to authenticated;

grant delete, insert, references, select, trigger, truncate, update on public.presentations to service_role;
